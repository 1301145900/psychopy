Localization (I18N, translation)
==================================

PsychoPy is used worldwide. Starting with v1.81, many parts of PsychoPy itself (the app) can be translated into a great variety of languages. A translation affects what the experimenter sees while creating and running experiments; it is completely separate from what is shown to the subject.

In the app, translation is handled by a function with a standard name, ``_()``, which takes a string argument. It returns a translated, unicode version of the string in the locale / language that is currently selected. If no translation is available for that locale, the original string is returned.

A locale setting (e.g., 'ja_JP' for Japanese) allows the end-user to control the langauge that will be used for display. (It can potentially control other display conventions as well, not just the language.) PsychoPy will obtain the locale from the user preference (if set), or the OS.

Workflow: 1) adjust PsychoPy code, 2) auto-discover the strings that need to be translated and create a template file, 3) do a translation for a given language.

See notes in ``psychopy/app/localization/readme.txt``.

Adjust PsychoPy's code
----------------------------

There are a few things to keep in mind when working on the app's code to make it compatible with translations. If you are only making a translation, you can skip this section.

- In PsychoPy's code, the language to be used should always be English with American spellings (e.g., "color").

- Within the app, the return value from ``_()`` (i.e., a translated string) should be used only for display purposes: in menus, tooltips, etc. A translated value should never be used as part of the logic or internal functioning of PsychoPy. It is purely a "skin" for text.

- Basic usage is exactly what you expect: ``_("hello")`` will return a unicode string at run-time, using mappings for the current locale as provided by a translator in a .mo file (see below). (Not all translations are available yet, see below on how to create one.) To have the app display a translated string to the experimenter, just display the return value from the underscore translation function.

- The strings to be translated must appear somewhere in the app code base as explicit strings within ``_()``. If you need to translate a variable, e.g., named ``str_var`` using the expression ``_(str_var)``, somewhere else you need to explicitly give all the possible values that ``str_var`` can take, and enclose each of them within the translate function. Its okay for that to be elsewhere, even in another file, but not in a comment. This allows automated discovery of all the strings that need to be translated; it does cause a warning to be generated by pygettext in step #2, but still works.

- ``_()`` should not be given a null string to translate; if you use a variable, check that it is not '' to avoid invoking ``_('')``.

- Strings that contain formatting placeholders (e.g., %d, %s, %.4f) require a little more thought. Single placeholders are easy enough: ``_("hello, %s") % name``.

- Strings with multiple formatting placeholders require named arguments, because positional arguments are not always sufficient to disambiguate things depending on the phrase and the language to be translated into: ``_("hello, %(first)s %(last)s") % {'first': firstname, 'last': lastname}``

Make a template (.pot file)
----------------------------

A template (.pot) file is a master list of every string for which the app might need a translation, plus some metadata. The target strings are extracted from the app codebase using ``gettext``, which searches for all instances of ``_("string")``.

If you decide to use the Poedit, you need not update the .pot file from command shell. Poedit scans `*.py` file and generate `.po` file.

Alternatively, to make a .pot file, from within the directory ``psychopy/app/localization`` run:

    python utils/pygettext.py ../app

Make a translation (.po file)
------------------------------

To translate a given language, you'll need to know the standard 5-character code. For Japanese, wherever LANG appears in the documentation here, you should type the actual code, i.e., "ja_JP" (without quotes).

A free app called poedit is useful for working with the mappings stored in the .po files. For a given language, the translation mappings are stored in a .po file; after editing with poedit these can be converted into binary versions (.mo files) which are used when the app is running.

- Technical terms should not be translated: Builder, Coder, PsychoPy, Flow, Routine, and so on.

- If there are formatting arguments in the original (``%s``, ``%(first)i``), they must also appear in the translation. If they are named (e.g., ``%(first)i``), that part should not be translated--here ``first`` is a python name.

- Set your name and e-mail address from "Preferences..." of "File" menu. Set translation properties (such as project name, language and charset) from Catalog Properties Dialog, which can be opened from "Properties..." of "Catalog" menu.

- To add paths where Poedit scans .py files, open "Sources paths" tab on the Catalog Properties Dialog. Set "../../../../" to "Base path:". Because .po file is saved in psychopy/app/locale/LANG/LC_MESSAGE, ../../../../ indicates psychopy/ directory. Then, press "add new item" button and add "app" to "Paths" box. In the same way, add "preferences" to "Paths" box. If you are using Poedit 1.6.6 or later, you'll find "Excluded paths" box below the "Paths" box. add "app/localization/utils" to "Exclude paths". Then, Close Catalog Properties Dialog.
  If you've created new catalog, save your catalog to `psychopy/app/locale/LANG/LC_MESSAGE/messages.po`.

- Start translation (Do once):

  It is good to start a translation with opening `psychopy/app/locale/LANG/LC_MESSAGE/messages.po` in Poedit.
  If there is no such .po file, create a new one:

    - make a new directory `psychopy/app/locale/LANG/LC_MESSAGE/` if needed. `LANG` will be auto-detected only if you follow this convention.
    - use poedit to "update from sources" (after setting the paths). It is also possible to copy an existing .po file, or read from a template file `psychopy/app/localization/messages.pot`.

- Edit translation:

  Open .po file with Poedit and press "Update" button on the toolbar to update newly added / removed strings. Select a string you want to translate and input your translation to "Translation:" box. If you are unsure where string is used, point on the string in "Source text" box and right-click. You can see where the string is defined.
  After editing, press "Save" button on the toolbar. .po file is saved and .mo file is generated in the directory where .po file is placed (i.e. `psychopy/app/locale/LANG/messages.po`). Move .mo file there if it was not put there by default (but see note below).

- If you think your translation might have room for improvement, indicate that its "fuzzy".

- After making new a translation, rebuild the associated .mo file (if poedit did not do so).

- Edit the file containing language code and name mappings, `psychopy/app/localization/mappings`, and fill in the name for your language.

- Commit btoh the .po and .mo files to github (not just one or the other), and any changed files (e.g., mappings).

Other notes
-------------

When there are more translations (and if they make the app download large) we might want to manage things differently (e.g., have translations as a separate download from the app).

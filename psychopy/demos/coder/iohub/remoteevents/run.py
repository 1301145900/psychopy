#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""ioHub Network EventPublisher / RemoteEventSubscriber Device Demo.

In real use cases, the network EventPublisher and RemoteEventSubscriber
iohub devices would be running on different computers. For simplicity,
in this demo, both of these devices run locally on the same ioHub Server.

The EventPublisher publishes Keyboard Press and Release events, while the
RemoteEventSubscriber subscribes to Keyboard Press and Release events.

** IMPORTANT: The Python package 'pyzmq' must be installed to be able to use
   the EventPublisher and / or RemoteEventSubscriber devices.
   The pyzmq website is https://github.com/zeromq/pyzmq
"""

from __future__ import division, print_function, absolute_import

from psychopy.core import getTime
from psychopy.gui.qtgui import infoDlg
from psychopy.iohub.client import launchHubServer
from psychopy.iohub.constants import EventConstants

# Configure the ioHub Server using an 'iohub_config' dict variable instead of
# an iohub_config.yaml file. The dict includes entries defining the
# ioHub EventPublisher and EventSubscriber devices used in the demo.
# The dict is passed as the kwargs to the launchHubServer function that
# starts the ioHub Server Process.
iohub_config = dict()

# ** Add the EventPublisher config settings.....
pubdev = iohub_config['network.EventPublisher'] = dict()
pubdev['name'] = 'evt_pub'
pubdev['event_buffer_length'] = 128
# Use a non zero device number when creating an event publisher.
# All events received by subscribing computer will be tagged with this
# device number, allowing them to be seperated / distinguished from
# locally generated events of the same type.
pubdev['device_number'] = 1
pubdev['monitor_event_types'] = ['KeyboardPressEvent',
                                 'KeyboardReleaseEvent']
pubdev['publishing_protocal'] = 'tcp://127.0.0.1:5555'

# ** Add the EventSubscriber config settings.....
subdev = iohub_config['network.RemoteEventSubscriber'] = dict()
subdev['name'] = 'evt_sub'
subdev['event_buffer_length'] = 128
subdev['monitor_event_types'] = ['KeyboardPressEvent',
                                 'KeyboardReleaseEvent']
subdev['subscription_protocal'] = 'tcp://127.0.0.1:5555'
# remote_iohub_address specifies the ioHub server ip and standard UDP port
# for the 'remote' ioHub Server instance that is running the EventPublisher.
# Port 9034 is the default ioHub server UDP port, so unless it has been
# reconfigured, it is a good bet. ;)
subdev['remote_iohub_address'] = ['127.0.0.1', 9034]

# ** To enable hdf5 event storage, at minimum specify an experiment_code....
iohub_config['experiment_code'] = 'pubsub_demo'

# Start iohub ...
io = launchHubServer(**iohub_config)

kb = io.devices.keyboard
evt_sub = io.devices.evt_sub

# Display a demo info dialog....
infoDlg('psychopy.iohub PUB - SUB Event Demo',
        "This demo does not create a PsychoPy Window.\n\n"
        "Once this dialog is closed events generated by the Keyboard, "
        "or received by the network.RemoteEventSubscriber device, are printed "
        "to stdout.\n\nPressing 'ESCAPE' will quit the demo.")

# Wait for kb event.key=='escape', or quit after 15 seconds of no kb events.
last_event_time = getTime()
io.clearEvents()
run_demo = True
while run_demo is True and getTime() - last_event_time < 15.0:
    # Get and print any local keyboard device events...
    local_kb_events = kb.getEvents()
    for event in local_kb_events:
        etype_str = EventConstants.getName(event.type)
        kbstr = 'Keyboard:\t%s\t%.3f\t%s' % (etype_str, event.time, event.key)
        print('>>', kbstr)
        last_event_time = event.time
        if event.key == 'escape':
            run_demo = False

    # Get and print any events received by the network subscriber device...
    subscribed_kb_events = evt_sub.getEvents()
    for e in subscribed_kb_events:
        estr = EventConstants.getName(e.type)
        print('<< EventSubscriber:\t%s\t%.3f\t%s' % (estr, e.time, e.key))
    if subscribed_kb_events:
        print()

# End of demo
io.quit()

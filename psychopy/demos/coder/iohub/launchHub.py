#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""Testing the iohub.launchHubServer function illustrating different ways
it can be used.

No PsychoPy Window is created for this demo; results are printed to stdout.
"""
from __future__ import division, print_function, absolute_import

import time
from pprint import pprint

from psychopy.iohub.client import launchHubServer


def testWithNoKwargs():
    """
    testWithNoKwargs illustrates using the launchHubServer function with no
    parameters at all. Considerations:
        * Default Keyboard, Mouse, Monitor, and Experiment devices are created.
        * ioHub DataStore is not enabled.
    """
    io = launchHubServer()

    # Get the default keyboard device created.
    keyboard = io.devices.keyboard

    print()
    print(' ** PRESS A KEY TO CONTINUE.....')

    # Check for new events every 1/4 second.
    # By using the io.wait() fucntion, the ioHub Process is checked for
    # events every 50 msec or so, and they are cached in the PsychoPy process
    # until the next getEvents() call is made. On Windows, messagePump() is
    # also called periodically so that any Window you have created does not
    # lock up.
    while not keyboard.getEvents():
        io.wait(0.25)

    print('A Keyboard Event was Detected; exiting Test.')

    io.quit()


def testUsingPsychoPyMonitorConfig():
    """
    testUsingPsychoPyMonitorConfig illustrates providing a PsychoPy monitor
    configuration file name to the launchHubServer function.
    Considerations:
        * Default Keyboard, Mouse, Monitor, and Experiment devices are created.
        * If the psychopy_monitor_name is valid, the ioHub Display size and
          viewing distance are updated using the psychopy monitor config.
        * ioHub DataStore is not enabled.
    """

    io = launchHubServer(psychopy_monitor_name='testMonitor')

    # Get the default display device created.
    display = io.devices.display

    print('Display Psychopy Monitor Name: ', display.getPsychopyMonitorName())
    print('Display Default Eye Distance: ', display.getDefaultEyeDistance())
    print('Display Physical Dimensions: ', display.getPhysicalDimensions())

    # That's it, shut down the ioHub Proicess and exit. ;)
    io.quit()


def testEnabledDataStore():
    """
    testEnabledDataStore illustrates that by adding an experiment_code
    kwarg to launchHubServer(....), an ioHub HDF5 file is created by the
    ioHub Server which saves all the device events.

    Experiment and session metadata is printed at the end of the demo.
    Considerations:
        * Default Keyboard, Mouse, Monitor, and Experiment devices are created.
        * ioHub DataStore is enabled: ioHub Server saves events to a HDF5 file.
        * session_code is autogenerated based on the current date/time.
        * session_code is used to name the saved HDF5 file.
    """
    exp_code = 'gap_endo_que'
    io = launchHubServer(experiment_code=exp_code)

    print('Experiment Metadata: ')
    pprint(io.getExperimentMetaData())
    print('\nSession Metadata: ')
    pprint(io.getSessionMetaData())

    io.quit()


def testEnabledDataStoreAutoSessionCode():
    """
    testEnabledDataStoreAutoSessionCode is the same as testEnabledDataStore
    above, but session_code is provided by the script instead of being
    auto-generated. The ioHub DataStore will be enabled, using the
    experiment and session_code provided each time it is run. Experiment
    and session metadata is printed at the end of the demo.

    Considerations:
        * Default Keyboard, Mouse, Monitor, and Experiment devices are created.
        * ioHub DataStore is enabled: ioHub Server saves events to a HDF5 file.
        * session_code is used to name the saved HDF5 file.
    """
    exp_code = 'gap_endo_que'
    sess_code = 'S_{0}'.format(long(time.mktime(time.localtime())))
    print('Current Session Code will be: ', sess_code)

    io = launchHubServer(experiment_code=exp_code,
                         session_code=sess_code)

    print('Experiment Metadata: ')
    pprint(io.getExperimentMetaData())
    print('\nSession Metadata: ')
    pprint(io.getSessionMetaData())

    io.quit()


if __name__ == '__main__':
    test_list = ['testWithNoKwargs', 'testUsingPsychoPyMonitorConfig',
                 'testEnabledDataStore', 'testEnabledDataStoreAutoSessionCode']
    for test in test_list:
        print('\n------------------------------------\n')
        print('Running %s Test:' % (test))

        for namespace in (locals(), globals()):
            if test in namespace:
                result = namespace[test]()
                print('Test Result: ', result)
                break

# The contents of this file are in the public domain.

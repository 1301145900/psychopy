#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Displays values from 8 channels ( 0 - 7 ) from the AnalogInput Device as
configured in the iohub.config.yaml file in this directory.

@author: Sol
"""
from __future__ import division, print_function

from collections import OrderedDict

from psychopy import visual
from psychopy.iohub.client import launchHubServer

# Number of 'trials' to run in demo
trial_count = 3

# Start the ioHub Server process. Since an experiment_code is provided,
# data will be saved to an hdf5 file with an autogenerated name. 
io = launchHubServer(experiment_code='ain_demo',
                     iohub_config_name='iohub_config.yaml')
display = io.devices.display
kb = io.devices.kb
ain = io.devices.ain

display_resolution = display.getPixelResolution()
psychopy_monitor = display.getPsychopyMonitorName()
unit_type = display.getCoordinateType()
screen_index = display.getIndex()

# Create a psychopy window, full screen resolution, full screen mode.
window = visual.Window(display_resolution, monitor=psychopy_monitor,
                       units=unit_type, color=[128, 128, 128], 
                       colorSpace='rgb255', fullscr=True, allowGUI=False,
                       screen=screen_index)

# Create an ordered dictionary of psychopy stimuli.
psychoStim = OrderedDict()
psychoStim['grating'] = visual.PatchStim(window, mask='circle',
                                         size=150, pos=[0, 0], sf=.075)

ttext = 'Analog Input Test. Trial 1 of %d' % (trial_count)
psychoStim['title'] = visual.TextStim(window, 
                                      text=ttext, pos=[0, 200], height=36,
                                      color=[1, .5, 0], colorSpace='rgb',
                                      alignHoriz='center', alignVert='center',
                                      wrapWidth=800.0)

aivals_txt_str = 'AI_0: %.3f\tAI_1: %.3f\tAI_2: %.3f\tAI_3: %.3f\t\n'
aivals_txt_str +='AI_4: %.3f\tAI_5: %.3f\tAI_6: %.3f\tAI_7: %.3f'
ai_values = (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
psychoStim['ain_values'] = visual.TextStim(window,
                                           text=aivals_txt_str % ai_values,
                                           pos=[0, -200], height=24,
                                           color=[1, 1, 0],
                                           colorSpace='rgb',
                                           alignHoriz='center',
                                           alignVert='center',
                                           wrapWidth=800.0)

psychoStim['instruction'] = visual.TextStim(window,
                                            text='Press SPACE for Next Trial',
                                            pos=[0, -300], height=36,
                                            color=[1, 1, 0.5],
                                            colorSpace='rgb',
                                            alignHoriz='center',
                                            alignVert='center',
                                            wrapWidth=800.0)

# Clear all events from the global and device level event buffers.
io.clearEvents()

# Run a number of analog input recording /trials/
#
for i in range(trial_count):
    # Clear all events from the global and device level event buffers.
    ttext = 'Analog Input Test. Trial %d of %d' % (i + 1, trial_count)
    psychoStim['title'].setText(ttext)
    io.clearEvents()

    # Start streaming AnalogInput data.
    #
    ain.enableEventReporting(True)

    # Loop until we get a keyboard event where the
    #   SPACE key was pressed.
    #
    while True:

        # For each retrace, update the grating phase
        #
        psychoStim['grating'].setPhase(0.05, '+')

        # Update analog input values to display
        #
        analog_input_events = ain.getEvents()
        if analog_input_events:
            event_count = len(analog_input_events)
            event = analog_input_events[-1]
            ai_values = (event.AI_0, event.AI_1, event.AI_2, event.AI_3,
                         event.AI_4, event.AI_5, event.AI_6, event.AI_7)
            psychoStim['ain_values'].setText(aivals_txt_str % ai_values)

        # redraw the stim
        [psychoStim[stimName].draw() for stimName in psychoStim]

        # Flip, storing the time of the start of display update retrace.
        #
        flip_time = window.flip()

        # Send a message to the ioHub Process with indicating
        #   that a flip occurred and at what time.
        #
        io.sendMessageEvent('Flip', sec_time=flip_time)

        # End trial when space key is pressed.
        #
        if ' ' in kb.getPresses():
            break

    # Clear the screen
    #
    window.flip()

    # Stop analog input recording
    #
    ain.enableEventReporting(False)

    # Delay 1/4 second before next trial
    #
    io.wait(0.250)

io.quit()
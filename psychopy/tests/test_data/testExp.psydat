ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
S'testExp'
p8
sS'runtimeInfo'
p9
NsS'name'
p10
g8
sS'dataNames'
p11
(lp12
S'training.rt'
p13
aS'training.key'
p14
aS'staircase.result'
p15
aS'id'
p16
asS'extraInfo'
p17
(dp18
S'participant'
p19
S'jwp'
p20
sS'ori'
p21
I45
ssS'loopsUnfinished'
p22
(lp23
sS'saveWideText'
p24
I01
sS'thisEntry'
p25
(dp26
sS'version'
p27
S'0.1'
p28
sS'entries'
p29
(lp30
(dp31
g14
S'right'
p32
sS'train.thisRepN'
p33
I0
sS'train.thisTrialN'
p34
I0
sS'train.thisN'
p35
I0
sg13
F0.59266410977503758
sS'train.thisIndex'
p36
cnumpy.core.multiarray
scalar
p37
(cnumpy
dtype
p38
(S'i4'
I0
I1
tRp39
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x01\x00\x00\x00'
tRp40
sa(dp41
g14
S'left'
p42
sS'train.thisRepN'
p43
I0
sS'train.thisTrialN'
p44
I1
sS'train.thisN'
p45
I1
sg13
F0.60984874631249608
sS'train.thisIndex'
p46
g37
(g39
S'\x02\x00\x00\x00'
tRp47
sa(dp48
g14
g32
sS'train.thisRepN'
p49
I0
sS'train.thisTrialN'
p50
I2
sS'train.thisN'
p51
I2
sg13
F0.90584157454466163
sS'train.thisIndex'
p52
g37
(g39
S'\x00\x00\x00\x00'
tRp53
sa(dp54
g14
g32
sS'train.thisRepN'
p55
I0
sS'train.thisTrialN'
p56
I3
sS'train.thisN'
p57
I3
sg13
F0.90811237436292003
sS'train.thisIndex'
p58
g37
(g39
S'\x03\x00\x00\x00'
tRp59
sa(dp60
g14
g42
sS'train.thisRepN'
p61
I1
sS'train.thisTrialN'
p62
I0
sS'train.thisN'
p63
I4
sg13
F0.71585209183156084
sS'train.thisIndex'
p64
g37
(g39
S'\x00\x00\x00\x00'
tRp65
sa(dp66
g14
g32
sS'train.thisRepN'
p67
I1
sS'train.thisTrialN'
p68
I1
sS'train.thisN'
p69
I5
sg13
F0.90882468938836369
sS'train.thisIndex'
p70
g37
(g39
S'\x01\x00\x00\x00'
tRp71
sa(dp72
g14
g32
sS'train.thisRepN'
p73
I1
sS'train.thisTrialN'
p74
I2
sS'train.thisN'
p75
I6
sg13
F0.58770522687116833
sS'train.thisIndex'
p76
g37
(g39
S'\x02\x00\x00\x00'
tRp77
sa(dp78
g14
g32
sS'train.thisRepN'
p79
I1
sS'train.thisTrialN'
p80
I3
sS'train.thisN'
p81
I7
sg13
F0.50284425367628671
sS'train.thisIndex'
p82
g37
(g39
S'\x03\x00\x00\x00'
tRp83
sa(dp84
g14
g32
sS'train.thisRepN'
p85
I2
sS'train.thisTrialN'
p86
I0
sS'train.thisN'
p87
I8
sg13
F0.89783125423664367
sS'train.thisIndex'
p88
g37
(g39
S'\x00\x00\x00\x00'
tRp89
sa(dp90
g14
g42
sS'train.thisRepN'
p91
I2
sS'train.thisTrialN'
p92
I1
sS'train.thisN'
p93
I9
sg13
F0.79942168846424644
sS'train.thisIndex'
p94
g37
(g39
S'\x03\x00\x00\x00'
tRp95
sa(dp96
g14
g32
sS'train.thisRepN'
p97
I2
sS'train.thisTrialN'
p98
I2
sS'train.thisN'
p99
I10
sg13
F0.55257384270602816
sS'train.thisIndex'
p100
g37
(g39
S'\x01\x00\x00\x00'
tRp101
sa(dp102
g14
g42
sS'train.thisRepN'
p103
I2
sS'train.thisTrialN'
p104
I3
sS'train.thisN'
p105
I11
sg13
F0.5182380282962844
sS'train.thisIndex'
p106
g37
(g39
S'\x02\x00\x00\x00'
tRp107
sa(dp108
S'stairBlock.thisTrialN'
p109
I0
sS'stairBlock.thisIndex'
p110
g37
(g39
S'\x00\x00\x00\x00'
tRp111
sg15
I1
sS'staircase.thisTrialN'
p112
I0
sS'stairBlock.thisRepN'
p113
I0
sS'staircase.stepSize'
p114
I4
sS'stairBlock.thisN'
p115
I0
sg16
F0.57690149940003288
sa(dp116
S'stairBlock.thisTrialN'
p117
I0
sS'stairBlock.thisIndex'
p118
g111
sS'staircase.result'
p119
I1
sS'staircase.thisTrialN'
p120
I1
sS'stairBlock.thisRepN'
p121
I0
sS'staircase.stepSize'
p122
I4
sS'stairBlock.thisN'
p123
I0
sg16
F0.63018393647537607
sa(dp124
S'stairBlock.thisTrialN'
p125
I0
sS'stairBlock.thisIndex'
p126
g111
sS'staircase.result'
p127
I0
sS'staircase.thisTrialN'
p128
I2
sS'stairBlock.thisRepN'
p129
I0
sS'staircase.stepSize'
p130
I4
sS'stairBlock.thisN'
p131
I0
sg16
F0.020439132026923157
sa(dp132
S'stairBlock.thisTrialN'
p133
I0
sS'stairBlock.thisIndex'
p134
g111
sS'staircase.result'
p135
I1
sS'staircase.thisTrialN'
p136
I3
sS'stairBlock.thisRepN'
p137
I0
sS'staircase.stepSize'
p138
I4
sS'stairBlock.thisN'
p139
I0
sg16
F0.54468487817864752
sa(dp140
S'stairBlock.thisTrialN'
p141
I0
sS'stairBlock.thisIndex'
p142
g111
sS'staircase.result'
p143
I0
sS'staircase.thisTrialN'
p144
I4
sS'stairBlock.thisRepN'
p145
I0
sS'staircase.stepSize'
p146
I4
sS'stairBlock.thisN'
p147
I0
sg16
F0.25069522913839593
sa(dp148
S'stairBlock.thisTrialN'
p149
I0
sS'stairBlock.thisIndex'
p150
g37
(g39
S'\x00\x00\x00\x00'
tRp151
sS'staircase.result'
p152
I1
sS'staircase.thisTrialN'
p153
I0
sS'stairBlock.thisRepN'
p154
I1
sS'staircase.stepSize'
p155
I4
sS'stairBlock.thisN'
p156
I1
sg16
F0.85239508784130635
sa(dp157
S'stairBlock.thisTrialN'
p158
I0
sS'stairBlock.thisIndex'
p159
g151
sS'staircase.result'
p160
I0
sS'staircase.thisTrialN'
p161
I1
sS'stairBlock.thisRepN'
p162
I1
sS'staircase.stepSize'
p163
I4
sS'stairBlock.thisN'
p164
I1
sg16
F0.88485329349110553
sa(dp165
S'stairBlock.thisTrialN'
p166
I0
sS'stairBlock.thisIndex'
p167
g151
sS'staircase.result'
p168
I0
sS'staircase.thisTrialN'
p169
I2
sS'stairBlock.thisRepN'
p170
I1
sS'staircase.stepSize'
p171
I4
sS'stairBlock.thisN'
p172
I1
sg16
F0.59885894587574717
sa(dp173
S'stairBlock.thisTrialN'
p174
I0
sS'stairBlock.thisIndex'
p175
g151
sS'staircase.result'
p176
I0
sS'staircase.thisTrialN'
p177
I3
sS'stairBlock.thisRepN'
p178
I1
sS'staircase.stepSize'
p179
I4
sS'stairBlock.thisN'
p180
I1
sg16
F0.34019021537064575
sa(dp181
S'stairBlock.thisTrialN'
p182
I0
sS'stairBlock.thisIndex'
p183
g151
sS'staircase.result'
p184
I0
sS'staircase.thisTrialN'
p185
I4
sS'stairBlock.thisRepN'
p186
I1
sS'staircase.stepSize'
p187
I4
sS'stairBlock.thisN'
p188
I1
sg16
F0.23769420862405044
sa(dp189
S'stairBlock.thisTrialN'
p190
I0
sS'stairBlock.thisIndex'
p191
g37
(g39
S'\x00\x00\x00\x00'
tRp192
sS'staircase.result'
p193
I0
sS'staircase.thisTrialN'
p194
I0
sS'stairBlock.thisRepN'
p195
I2
sS'staircase.stepSize'
p196
I4
sS'stairBlock.thisN'
p197
I2
sg16
F0.50543142963578924
sa(dp198
S'stairBlock.thisTrialN'
p199
I0
sS'stairBlock.thisIndex'
p200
g192
sS'staircase.result'
p201
I1
sS'staircase.thisTrialN'
p202
I1
sS'stairBlock.thisRepN'
p203
I2
sS'staircase.stepSize'
p204
I4
sS'stairBlock.thisN'
p205
I2
sg16
F0.59280540097588663
sa(dp206
S'stairBlock.thisTrialN'
p207
I0
sS'stairBlock.thisIndex'
p208
g192
sS'staircase.result'
p209
I1
sS'staircase.thisTrialN'
p210
I2
sS'stairBlock.thisRepN'
p211
I2
sS'staircase.stepSize'
p212
I4
sS'stairBlock.thisN'
p213
I2
sg16
F0.14260031444628352
sa(dp214
S'stairBlock.thisTrialN'
p215
I0
sS'stairBlock.thisIndex'
p216
g192
sS'staircase.result'
p217
I1
sS'staircase.thisTrialN'
p218
I3
sS'stairBlock.thisRepN'
p219
I2
sS'staircase.stepSize'
p220
I4
sS'stairBlock.thisN'
p221
I2
sg16
F0.94637988080910129
sa(dp222
S'stairBlock.thisTrialN'
p223
I0
sS'stairBlock.thisIndex'
p224
g192
sS'staircase.result'
p225
I0
sS'staircase.thisTrialN'
p226
I4
sS'stairBlock.thisRepN'
p227
I2
sS'staircase.stepSize'
p228
I4
sS'stairBlock.thisN'
p229
I2
sg16
F0.38776628032663074
sasS'loops'
p230
(lp231
g1
(cpsychopy.data
TrialHandler
p232
g3
NtRp233
(dp234
S'origin'
p235
Vfrom psychopy import data, log\u000afrom numpy import random\u000alog.console.setLevel(log.DEBUG)\u000a\u000aexp = data.ExperimentHandler(name='testExp',\u000a                version='0.1',\u000a                extraInfo={'participant':'jwp','ori':45},\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='testExp')\u000a                \u000a#a first loop (like training?)    \u000aconds = data.createFactorialTrialList({'faceExpression':['happy','sad'],'presTime':[0.2,0.3]})\u000atraining=data.TrialHandler(trialList=conds, nReps=3,name='train',\u000a                 method='random',\u000a                 seed=100)#this will set the global seed - so fixed for whole exp\u000aexp.addLoop(training)\u000a#run those trials\u000afor trial in training:\u000a    training.addData('training.rt',random.random()*0.5+0.5)\u000a    if random.random()>0.5:\u000a        training.addData('training.key','left')\u000a    else:\u000a        training.addData('training.key','right')\u000a    exp.nextEntry()\u000a\u000a#then run 3 repeats of a staircase\u000aouterLoop=data.TrialHandler(trialList=[], nReps=3,name='stairBlock',\u000a                 method='random')\u000aexp.addLoop(outerLoop)\u000afor thisRep in outerLoop:#the outer loop doesn't save any data\u000a    staircase=data.StairHandler(startVal=10, name='staircase', nTrials=5)\u000a    exp.addLoop(staircase)\u000a    for thisTrial in staircase:\u000a        id=random.random()\u000a        if random.random()>0.5:\u000a            staircase.addData(1)\u000a        else:\u000a            staircase.addData(0)\u000a        exp.addData('id',id)\u000a        exp.nextEntry()\u000a#exp should then automatically save the pickle and csv data files\u000afor e in exp.entries:\u000a    print e\u000aprint 'done'\u000aprint training.getExp()
p236
sS'thisTrial'
p237
(lp238
sS'_exp'
p239
I367179184
sg10
S'train'
p240
sg6
S'/Users/jwp/code/psychopy/git/psychopy/tests/testData/testExperimentHandler.py'
p241
sS'thisRepN'
p242
I3
sS'nTotal'
p243
I12
sg17
NsS'data'
p244
g1
(cpsychopy.data
DataHandler
p245
c__builtin__
dict
p246
(dp247
S'ran'
p248
cnumpy.ma.core
_mareconstruct
p249
(cnumpy.ma.core
MaskedArray
p250
cnumpy
ndarray
p251
(I0
tp252
S'b'
tRp253
(I1
(I4
I3
tg38
(S'f4'
I0
I1
tRp254
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg13
g249
(g250
g251
g252
S'b'
tRp255
(I1
(I4
I3
tg254
I00
S'<\xe5g?\x15B7?E\xd8e?\xd6\xb8\x17?\xbc\xa8h?{u\r?\x0c\x1f\x1c?\xdas\x16??\xab\x04?\rzh?g\xba\x00?\xe6\xa6L?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg14
cnumpy.core.multiarray
_reconstruct
p256
(g251
(I0
tS'b'
tRp257
(I1
(I4
I3
tg38
(S'O4'
I0
I1
tRp258
(I3
S'|'
NNNI-1
I-1
I63
tbI00
(lp259
g32
ag42
ag32
ag32
ag32
ag32
ag42
ag32
ag42
ag32
ag32
ag42
atbstRp260
(dp261
S'isNumeric'
p262
(dp263
g248
I01
sg13
I01
sg14
I00
ssS'trials'
p264
g233
sS'dataTypes'
p265
(lp266
g248
ag13
ag14
asS'dataShape'
p267
(lp268
I4
aI3
asbsS'thisN'
p269
I12
sS'sequenceIndices'
p270
g256
(g251
(I0
tS'b'
tRp271
(I1
(I4
I3
tg39
I01
S'\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00'
tbsS'finished'
p272
I01
sS'nReps'
p273
I3
sS'nRemaining'
p274
I-1
sS'trialList'
p275
(lp276
g1
(cpsychopy.data
TrialType
p277
g246
(dp278
S'faceExpression'
p279
S'happy'
p280
sS'presTime'
p281
F0.20000000000000001
stRp282
ag1
(g277
g246
(dp283
g279
S'sad'
p284
sg281
F0.20000000000000001
stRp285
ag1
(g277
g246
(dp286
g279
g280
sg281
F0.29999999999999999
stRp287
ag1
(g277
g246
(dp288
g279
g284
sg281
F0.29999999999999999
stRp289
asS'seed'
p290
I100
sS'thisIndex'
p291
g107
sS'thisTrialN'
p292
I0
sS'method'
p293
S'random'
p294
sS'_warnUseOfNext'
p295
I01
sbag1
(g232
g3
NtRp296
(dp297
g235
Vfrom psychopy import data, log\u000afrom numpy import random\u000alog.console.setLevel(log.DEBUG)\u000a\u000aexp = data.ExperimentHandler(name='testExp',\u000a                version='0.1',\u000a                extraInfo={'participant':'jwp','ori':45},\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='testExp')\u000a                \u000a#a first loop (like training?)    \u000aconds = data.createFactorialTrialList({'faceExpression':['happy','sad'],'presTime':[0.2,0.3]})\u000atraining=data.TrialHandler(trialList=conds, nReps=3,name='train',\u000a                 method='random',\u000a                 seed=100)#this will set the global seed - so fixed for whole exp\u000aexp.addLoop(training)\u000a#run those trials\u000afor trial in training:\u000a    training.addData('training.rt',random.random()*0.5+0.5)\u000a    if random.random()>0.5:\u000a        training.addData('training.key','left')\u000a    else:\u000a        training.addData('training.key','right')\u000a    exp.nextEntry()\u000a\u000a#then run 3 repeats of a staircase\u000aouterLoop=data.TrialHandler(trialList=[], nReps=3,name='stairBlock',\u000a                 method='random')\u000aexp.addLoop(outerLoop)\u000afor thisRep in outerLoop:#the outer loop doesn't save any data\u000a    staircase=data.StairHandler(startVal=10, name='staircase', nTrials=5)\u000a    exp.addLoop(staircase)\u000a    for thisTrial in staircase:\u000a        id=random.random()\u000a        if random.random()>0.5:\u000a            staircase.addData(1)\u000a        else:\u000a            staircase.addData(0)\u000a        exp.addData('id',id)\u000a        exp.nextEntry()\u000a#exp should then automatically save the pickle and csv data files\u000afor e in exp.entries:\u000a    print e\u000aprint 'done'\u000aprint training.getExp()
p298
sg237
(lp299
sg239
I367179184
sg10
S'stairBlock'
p300
sg6
g241
sg242
I3
sg243
I3
sg17
Nsg244
g1
(g245
g246
(dp301
g248
g249
(g250
g251
g252
S'b'
tRp302
(I1
(I1
I3
tg254
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
NtbstRp303
(dp304
g262
(dp305
g248
I01
ssg264
g296
sg265
(lp306
g248
asg267
(lp307
I1
aI3
asbsg269
I3
sg270
g256
(g251
(I0
tS'b'
tRp308
(I1
(I1
I3
tg39
I01
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg272
I01
sg273
I3
sg274
I-1
sg275
(lp309
Nasg290
Nsg291
g192
sg292
I0
sg293
g294
sg295
I01
sbag1
(cpsychopy.data
StairHandler
p310
g3
NtRp311
(dp312
g235
Vfrom psychopy import data, log\u000afrom numpy import random\u000alog.console.setLevel(log.DEBUG)\u000a\u000aexp = data.ExperimentHandler(name='testExp',\u000a                version='0.1',\u000a                extraInfo={'participant':'jwp','ori':45},\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='testExp')\u000a                \u000a#a first loop (like training?)    \u000aconds = data.createFactorialTrialList({'faceExpression':['happy','sad'],'presTime':[0.2,0.3]})\u000atraining=data.TrialHandler(trialList=conds, nReps=3,name='train',\u000a                 method='random',\u000a                 seed=100)#this will set the global seed - so fixed for whole exp\u000aexp.addLoop(training)\u000a#run those trials\u000afor trial in training:\u000a    training.addData('training.rt',random.random()*0.5+0.5)\u000a    if random.random()>0.5:\u000a        training.addData('training.key','left')\u000a    else:\u000a        training.addData('training.key','right')\u000a    exp.nextEntry()\u000a\u000a#then run 3 repeats of a staircase\u000aouterLoop=data.TrialHandler(trialList=[], nReps=3,name='stairBlock',\u000a                 method='random')\u000aexp.addLoop(outerLoop)\u000afor thisRep in outerLoop:#the outer loop doesn't save any data\u000a    staircase=data.StairHandler(startVal=10, name='staircase', nTrials=5)\u000a    exp.addLoop(staircase)\u000a    for thisTrial in staircase:\u000a        id=random.random()\u000a        if random.random()>0.5:\u000a            staircase.addData(1)\u000a        else:\u000a            staircase.addData(0)\u000a        exp.addData('id',id)\u000a        exp.nextEntry()\u000a#exp should then automatically save the pickle and csv data files\u000afor e in exp.entries:\u000a    print e\u000aprint 'done'\u000aprint training.getExp()
p313
sS'nDown'
p314
I3
sg239
I367179184
sS'reversalIntensities'
p315
(lp316
F3.9810717055349718
asS'stepSizes'
p317
I4
sS'nUp'
p318
I1
sS'startVal'
p319
I10
sS'_nextIntensity'
p320
F10
sg295
I01
sg293
S'2AFC'
p321
sS'maxVal'
p322
NsS'stepSizeCurrent'
p323
I4
sS'correctCounter'
p324
I0
sS'nReversals'
p325
NsS'minVal'
p326
Nsg272
I01
sS'stepType'
p327
S'db'
p328
sg244
(lp329
I1
aI1
aI0
aI1
aI0
asS'reversalPoints'
p330
(lp331
I2
asg6
g241
sg10
S'staircase'
p332
sg17
NsS'currentDirection'
p333
S'up'
p334
sS'_variableStep'
p335
I00
sS'intensities'
p336
(lp337
I10
aF6.3095734448019316
aF3.9810717055349718
aF6.3095734448019316
aF6.3095734448019316
asS'nTrials'
p338
I5
sg292
I4
sbag1
(g310
g3
NtRp339
(dp340
g235
Vfrom psychopy import data, log\u000afrom numpy import random\u000alog.console.setLevel(log.DEBUG)\u000a\u000aexp = data.ExperimentHandler(name='testExp',\u000a                version='0.1',\u000a                extraInfo={'participant':'jwp','ori':45},\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='testExp')\u000a                \u000a#a first loop (like training?)    \u000aconds = data.createFactorialTrialList({'faceExpression':['happy','sad'],'presTime':[0.2,0.3]})\u000atraining=data.TrialHandler(trialList=conds, nReps=3,name='train',\u000a                 method='random',\u000a                 seed=100)#this will set the global seed - so fixed for whole exp\u000aexp.addLoop(training)\u000a#run those trials\u000afor trial in training:\u000a    training.addData('training.rt',random.random()*0.5+0.5)\u000a    if random.random()>0.5:\u000a        training.addData('training.key','left')\u000a    else:\u000a        training.addData('training.key','right')\u000a    exp.nextEntry()\u000a\u000a#then run 3 repeats of a staircase\u000aouterLoop=data.TrialHandler(trialList=[], nReps=3,name='stairBlock',\u000a                 method='random')\u000aexp.addLoop(outerLoop)\u000afor thisRep in outerLoop:#the outer loop doesn't save any data\u000a    staircase=data.StairHandler(startVal=10, name='staircase', nTrials=5)\u000a    exp.addLoop(staircase)\u000a    for thisTrial in staircase:\u000a        id=random.random()\u000a        if random.random()>0.5:\u000a            staircase.addData(1)\u000a        else:\u000a            staircase.addData(0)\u000a        exp.addData('id',id)\u000a        exp.nextEntry()\u000a#exp should then automatically save the pickle and csv data files\u000afor e in exp.entries:\u000a    print e\u000aprint 'done'\u000aprint training.getExp()
p341
sg314
I3
sg239
I367179184
sg315
(lp342
F6.3095734448019316
asg317
I4
sg318
I1
sg319
I10
sg320
F39.810717055349734
sg295
I01
sg293
g321
sg322
Nsg323
I4
sg324
I0
sg325
Nsg326
Nsg272
I01
sg327
g328
sg244
(lp343
I1
aI0
aI0
aI0
aI0
asg330
(lp344
I1
asg6
g241
sg10
g332
sg17
Nsg333
g334
sg335
I00
sg336
(lp345
I10
aF6.3095734448019316
aF10
aF15.848931924611136
aF25.118864315095806
asg338
I5
sg292
I4
sbag1
(g310
g3
NtRp346
(dp347
g235
Vfrom psychopy import data, log\u000afrom numpy import random\u000alog.console.setLevel(log.DEBUG)\u000a\u000aexp = data.ExperimentHandler(name='testExp',\u000a                version='0.1',\u000a                extraInfo={'participant':'jwp','ori':45},\u000a                runtimeInfo=None,\u000a                originPath=None,\u000a                savePickle=True,\u000a                saveWideText=True,\u000a                dataFileName='testExp')\u000a                \u000a#a first loop (like training?)    \u000aconds = data.createFactorialTrialList({'faceExpression':['happy','sad'],'presTime':[0.2,0.3]})\u000atraining=data.TrialHandler(trialList=conds, nReps=3,name='train',\u000a                 method='random',\u000a                 seed=100)#this will set the global seed - so fixed for whole exp\u000aexp.addLoop(training)\u000a#run those trials\u000afor trial in training:\u000a    training.addData('training.rt',random.random()*0.5+0.5)\u000a    if random.random()>0.5:\u000a        training.addData('training.key','left')\u000a    else:\u000a        training.addData('training.key','right')\u000a    exp.nextEntry()\u000a\u000a#then run 3 repeats of a staircase\u000aouterLoop=data.TrialHandler(trialList=[], nReps=3,name='stairBlock',\u000a                 method='random')\u000aexp.addLoop(outerLoop)\u000afor thisRep in outerLoop:#the outer loop doesn't save any data\u000a    staircase=data.StairHandler(startVal=10, name='staircase', nTrials=5)\u000a    exp.addLoop(staircase)\u000a    for thisTrial in staircase:\u000a        id=random.random()\u000a        if random.random()>0.5:\u000a            staircase.addData(1)\u000a        else:\u000a            staircase.addData(0)\u000a        exp.addData('id',id)\u000a        exp.nextEntry()\u000a#exp should then automatically save the pickle and csv data files\u000afor e in exp.entries:\u000a    print e\u000aprint 'done'\u000aprint training.getExp()
p348
sg314
I3
sg239
I367179184
sg315
(lp349
F15.848931924611136
asg317
I4
sg318
I1
sg319
I10
sg320
F15.848931924611136
sg295
I01
sg293
g321
sg322
Nsg323
I4
sg324
I0
sg325
Nsg326
Nsg272
I01
sg327
g328
sg244
(lp350
I0
aI1
aI1
aI1
aI0
asg330
(lp351
I1
asg6
g241
sg10
g332
sg17
Nsg333
g334
sg335
I00
sg336
(lp352
I10
aF15.848931924611136
aF10
aF10
aF10
asg338
I5
sg292
I4
sbasS'savePickle'
p353
I01
sb.
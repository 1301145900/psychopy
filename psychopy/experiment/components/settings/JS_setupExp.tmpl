function setupExperiment() {{
  if (psychoJS.status === PsychoJS.Status.NOT_CONFIGURED) {{
    psychoJS.status = PsychoJS.Status.CONFIGURING;

    psychoJS.configure('config.json')
    .then(config => {{

      // An ExperimentHandler isn't essential but helps with data saving
      psychoJS.experiment = new ExperimentHandler({{extraInfo: _.expInfo}});

      // setup resource manager:
      psychoJS.resourceManager = new ResourceManager()

      /*
      // logging:
      _.logger.console.setLevel(psychoJS.logging.WARNING);
      _.logger.server.set({{'level':psychoJS.logging.WARNING, 'saveTo':'EXPERIMENT_SERVER', 'experimentInfo': _.expInfo}});*/

      psychoJS.status = PsychoJS.Status.CONFIGURED;
  }});
  }}
  // the loop will return until the configuration is completed
  // at which point the status changes to CONFIGURED
  if (psychoJS.status === PsychoJS.Status.CONFIGURED) {{
    psychoJS.status = PsychoJS.Status.STARTED;
    return Scheduler.Event.NEXT;
  }} else
    return Scheduler.Event.FLIP_REPEAT;
}}


function updateInfo() {{
  _.expInfo['date'] = MonotonicClock.getDateStr();  // add a simple timestamp
  _.expInfo['expName'] = _.expName;

  // store frame rate of monitor if we can measure it successfully
  _.expInfo['frameRate'] = _.window.getActualFrameRate();
  if (typeof _.expInfo['frameRate'] !== 'undefined')
    _.frameDur = 1.0/Math.round(_.expInfo['frameRate']);
  else
    _.frameDur = 1.0/60.0; // couldn't get a reliable measure so guess

  return Scheduler.Event.NEXT;
}}
